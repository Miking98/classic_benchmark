"""Usage:
    python3 2b_add_workflow_descriptions_to_annotations.py

Purpose:
    1. Loads the annotations.xlsx file generated by `2_convert_sampled_to_annotations.py`
    2. Load workflow_mapping.csv file, which contains workflow UUIDs and their descriptions
    3. Adds the workflow descriptions to the "Description" column of the "_workflows" sheets.
    4. Writes the updated annotations.xlsx file back to the same directory.
"""
import argparse
import os
from typing import Dict, List
import pandas as pd
from tqdm import tqdm
from dotenv import load_dotenv
import base64
from classicbench.utils import get_rel_path
load_dotenv()

def parse_args():
    parser = argparse.ArgumentParser(description="Sample and Evaluate Chat Data")
    parser.add_argument("--path_to_annotations_dir", type=str, default=get_rel_path("data/2_annotations"), help="Path to the raw dataset dump from Aisera.")
    parser.add_argument("--path_to_annotations_support_dir", type=str, default=get_rel_path("data/2b_annotations_support"), help="Path to where sampled chats will be saved.")
    parser.add_argument("--is_force_refresh", action="store_true", help="Force refresh the cache.")
    return parser.parse_args()

def main():
    args = parse_args()
    
    # Read workflow mapping file
    df_workflow_mapping: pd.DataFrame = pd.read_csv(os.path.join(args.path_to_annotations_support_dir, "workflow_mapping.csv"))
    
    # Read all sheets in excel file
    path_to_annotations_excel: str = os.path.join(args.path_to_annotations_dir, "annotations.xlsx")
    sheets: Dict[str, pd.DataFrame] = pd.read_excel(path_to_annotations_excel, sheet_name=None)
    for sheet_name, df in sheets.items():
        if "workflows" in sheet_name:
            # Limit to this sheet's domain
            df_workflow_mapping_in_domain = df_workflow_mapping[df_workflow_mapping["domain_uuid"] == sheet_name.replace("_workflows", "")]
            
            # Merge with workflow mapping
            df_sheet = df.merge(df_workflow_mapping_in_domain, right_on="workflow_uuid", left_on="ID", how="left", suffixes=("_sheet", "_workflow"))
            
            df_sheet = df_sheet[[
                "ID",
                "Name_sheet",
                "Description_500Characters",
            ]]
            df_sheet = df_sheet.rename(columns={
                "Name_sheet": "Name",
                "Description_500Characters": "Description",
            })
            
            # Write back to excel as sheet
            sheets[sheet_name] = df_sheet
    
    # Write back to excel
    with pd.ExcelWriter(path_to_annotations_excel) as writer:
        for sheet_name, df in sheets.items():
            df.to_excel(writer, sheet_name=sheet_name, index=False)

if __name__ == "__main__":
    main()
